# version: "2.4"
services:
 # database
  postgres-common:
    &postgres-common
    image: postgres:17
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -h localhost -d Intern'"]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - petro-network
  database-primary:
    <<: *postgres-common
    environment:
      POSTGRES_PASSWORD: "admin"
      POSTGRES_DB: "Intern"
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256"
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    command: |
      postgres 
      -c wal_level=replica 
      -c hot_standby=on 
      -c max_wal_senders=10 
      -c max_replication_slots=10 
      -c hot_standby_feedback=on
      -c log_statement=all
    volumes:
      - ./Database/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./Database/init.sh:/docker-entrypoint-initdb.d/init.sh
    ports:
      - "5432:5432" 
  database-replica:
    <<: *postgres-common
    ports:
      - "5433:5432"
    user: "postgres"
    environment:
      PGUSER: "replicator"
      PGPASSWORD: "admin123"
    command: |
      sh -c "
        echo 'Starting base backup from primary...'
        while true; do
            if pg_isready -h database-primary -d Intern; then
              echo 'Primary is healthy' 
              chmod 0700 /var/lib/postgresql/data
              rm -rf /var/lib/postgresql/data/*
              until pg_basebackup --pgdata=/var/lib/postgresql/data -R --slot=replication_slot --host=database-primary --port=5432
              do
                echo 'Waiting for backup to finish'
              done
              echo 'Backup done, starting replica'
              pg_ctl start -D /var/lib/postgresql/data -w
              until ! pg_isready -h database-primary -d Intern
              do
                echo 'Replication on primary is healthy'
                sleep 1
              done
            fi
            echo 'Primary is down. Promoting to master...'
            pg_ctl status -D /var/lib/postgresql/data >/dev/null 2>&1 || pg_ctl start -D /var/lib/postgresql/data -w
            pg_ctl promote -D /var/lib/postgresql/data
            echo 'Replica promoted to master!'
            while pg_isready -U replicator -h localhost -d Intern
            do
              echo 'Replication after promoting is healthy'
              sleep 1
              if pg_isready -h database-primary -d Intern; then
                echo 'Primary is back, stop promoting'
                pg_ctl stop -D /var/lib/postgresql/data
                break
              fi
            done
        done
      "
    volumes:
      - pgdata:/var/lib/postgresql/data
    depends_on:
      database-primary:
        condition: service_healthy
  # mqtt handler
  mqtt-handler: 
    build:
      context: MQTTHandler
      dockerfile: Dockerfile
    networks:
      - petro-network
    environment:
      SCHEMA: "petro_application"
      DBWRITE_CONNECTION_STRING: "Host=host.docker.internal;Port=5432;Username=write_user;Password=write123;Database=Intern"
      CLIENT_PFX_PATH: "certs/certificate.pfx"
      CLIENT_PFX_PASSWORD: "admin123"
      MOSQUITTO_USERNAME: "mqthanggg"
      MOSQUITTO_PASSWORD: "admin123"
      MOSQUITTO_HOST: "mqtt"
      MOSQUITTO_PORT: "8883"
      ASPNETCORE_ENVIRONMENT: "Development"
      ASPNETCORE_URLS: "https://0.0.0.0:7138;http://0.0.0.0:5195"
      ASPNETCORE_Kestrel__Certificates__Default__Password: "admin123"
      ASPNETCORE_Kestrel__Certificates__Default__Path: "/https/aspnetapp.pfx"
    volumes:
      - ./MQTTHandler/certs/aspnetapp.pfx:/https/aspnetapp.pfx:ro
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://0.0.0.0:5195/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
    ports:
      - "5195:5195"
      - "7138:7138"
    depends_on:
      database-primary:
        condition: service_healthy
      database-replica:
        condition: service_healthy
      mqtt:
        condition: service_started
  # mqtt broken
  mqtt:
    restart: always
    networks:
      - petro-network
    build:
      context: Mosquitto/mosquitto
      dockerfile: Dockerfile
    volumes:
      - ./Mosquitto/mosquitto/config:/mosquitto/config
      - ./Mosquitto/mosquitto/certs:/mosquitto/certs
    ports:
      - "8883:8883"
  # Client
  server1:
    build:
      context: ./PetroServer
      dockerfile: Dockerfile
    networks:
      - petro-network
    environment:
      - SCHEMA=petro_application
      - DBWRITE_CONNECTION_STRING=Host=host.docker.internal;Port=5432;Username=write_user;Password=write123;Database=Intern
      - DBREAD_CONNECTION_STRING=Host=host.docker.internal;Port=5432;Username=read_user;Password=read123;Database=Intern
      - DEVELOPMENT_AUTHORITY=http://localhost:5170
      - DEVELOPMENT_AUDIENCE=http://localhost:5170
      - PRODUCTION_AUTHORITY=https://localhost:7149
      - PRODUCTION_AUDIENCE=https://localhost:7149
      - PRIVATE_KEY_PATH=rsa_key/private_key.pem
      - PUBLIC_KEY_PATH=rsa_key/public_key.pem
      - CLIENT_PFX_PATH=certs/certificate.pfx
      - CLIENT_PFX_PASSWORD=admin123
      - MOSQUITTO_USERNAME=mqthanggg
      - MOSQUITTO_PASSWORD=admin123
      - MOSQUITTO_HOST=mqtt
      - MOSQUITTO_PORT=8883
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=https://0.0.0.0:7159;http://0.0.0.0:5180
      - ASPNETCORE_Kestrel__Certificates__Default__Password=admin123
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/https/aspnetapp.pfx
    volumes:
      - ./PetroServer/certs/aspnetapp.pfx:/https/aspnetapp.pfx:ro
    ports:
      - "5180:5180"
      - "7159:7159"
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:5180/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
    depends_on:
      database-primary:
        condition: service_healthy
      database-replica:
        condition: service_healthy
      mqtt:
        condition: service_started

  server2:
    build:
      context: ./PetroServer
      dockerfile: Dockerfile
    networks:
      - petro-network
    environment:
      - SCHEMA=petro_application
      - DBWRITE_CONNECTION_STRING=Host=host.docker.internal;Port=5432;Username=write_user;Password=write123;Database=Intern
      - DBREAD_CONNECTION_STRING=Host=host.docker.internal;Port=5432;Username=read_user;Password=read123;Database=Intern
      - DEVELOPMENT_AUTHORITY=http://localhost:5170
      - DEVELOPMENT_AUDIENCE=http://localhost:5170
      - PRODUCTION_AUTHORITY=https://localhost:7149
      - PRODUCTION_AUDIENCE=https://localhost:7149
      - PRIVATE_KEY_PATH=rsa_key/private_key.pem
      - PUBLIC_KEY_PATH=rsa_key/public_key.pem
      - CLIENT_PFX_PATH=certs/certificate.pfx
      - CLIENT_PFX_PASSWORD=admin123
      - MOSQUITTO_USERNAME=mqthanggg
      - MOSQUITTO_PASSWORD=admin123
      - MOSQUITTO_HOST=mqtt
      - MOSQUITTO_PORT=8883
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=https://0.0.0.0:7160;http://0.0.0.0:5181
      - ASPNETCORE_Kestrel__Certificates__Default__Password=admin123
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/https/aspnetapp.pfx
    volumes:
      - ./PetroServer/certs/aspnetapp.pfx:/https/aspnetapp.pfx:ro
    ports:
      - "5181:5181"
      - "7160:7160"
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:5181/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
    depends_on:
      database-primary:
        condition: service_healthy
      database-replica:
        condition: service_healthy
      mqtt:
        condition: service_started

  server3:
    build:
      context: ./PetroServer
      dockerfile: Dockerfile
    networks:
      - petro-network
    environment:
      - SCHEMA=petro_application
      - DBWRITE_CONNECTION_STRING=Host=database;Port=5432;Username=write_user;Password=write123;Database=Intern
      - DBREAD_CONNECTION_STRING=Host=database;Port=5432;Username=read_user;Password=read123;Database=Intern
      - DEVELOPMENT_AUTHORITY=http://localhost:5170
      - DEVELOPMENT_AUDIENCE=http://localhost:5170
      - PRODUCTION_AUTHORITY=https://localhost:7149
      - PRODUCTION_AUDIENCE=https://localhost:7149
      - PRIVATE_KEY_PATH=rsa_key/private_key.pem
      - PUBLIC_KEY_PATH=rsa_key/public_key.pem
      - CLIENT_PFX_PATH=certs/certificate.pfx
      - CLIENT_PFX_PASSWORD=admin123
      - MOSQUITTO_USERNAME=mqthanggg
      - MOSQUITTO_PASSWORD=admin123
      - MOSQUITTO_HOST=mqtt
      - MOSQUITTO_PORT=8883
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=https://0.0.0.0:7161;http://0.0.0.0:5182
      - ASPNETCORE_Kestrel__Certificates__Default__Password=admin123
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/https/aspnetapp.pfx
    volumes:
      - ./PetroServer/certs/aspnetapp.pfx:/https/aspnetapp.pfx:ro
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:5182/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
    ports:
      - "5182:5182"
      - "7161:7161"
    depends_on:
      database-primary:
        condition: service_healthy
      database-replica:
        condition: service_healthy
      mqtt:
        condition: service_started
 # UI
  fe:
    build:
      context: PetroUI
      dockerfile: Dockerfile
    ports:
      - "4200:4200"
    networks:
      - petro-network
    restart: always
    depends_on:
      server1:
        condition: service_healthy
networks:
  petro-network:
    driver: bridge
    
volumes:
  pgdata:
