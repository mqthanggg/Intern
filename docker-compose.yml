services:
  postgres-common:
    &postgres-common
    image: postgres:17
    restart: no
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -h localhost -d Intern'"]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - petro-network

  pg-bouncer-common:
    &pg-bouncer-common
    image: edoburu/pgbouncer
    restart: no
    networks:
      - petro-network
  database-primary:
    <<: *postgres-common
    environment:
      POSTGRES_PASSWORD: "admin"
      POSTGRES_DB: "Intern"
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256"
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
      TZ: "Asia/Saigon"
      PGTZ: "Asia/Saigon"
    command: |
      postgres 
      -c max_connections=200
      -c shared_buffers=512MB
      -c wal_level=replica 
      -c hot_standby=on 
      -c max_wal_senders=10 
      -c max_replication_slots=10 
      -c hot_standby_feedback=on
      -c log_statement=all
    volumes:
      - ./Database/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./Database/init.sh:/docker-entrypoint-initdb.d/init.sh
    expose:
      - "5432:5432"

  pg-bouncer-primary:
    <<: *pg-bouncer-common
    depends_on:
      database-primary: 
        condition: service_healthy
    expose:
      - "6432:6432"
    environment:
      DB_USER: "postgres"
      DB_PASSWORD: "admin"
      DB_HOST: "database-primary"
      DB_NAME: "Intern"
      TZ: "Asia/Saigon"
    volumes:
      - ./Database/PgBouncer/pgbouncer_primary.ini:/etc/pgbouncer/pgbouncer.ini
      - ./Database/PgBouncer/init.sh:/usr/local/bin/init.sh
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h localhost -d Intern -U postgres -p 6432"]
      interval: 10s
      timeout: 3s
      retries: 5
    entrypoint: "sh /usr/local/bin/init.sh"
  
  database-replica:
    <<: *postgres-common
    expose:
      - "5433:5433"
    user: "postgres"
    environment:
      PGPORT: 5433
      PGUSER: "replicator"
      PGPASSWORD: "admin123"
      TZ: "Asia/Saigon"
      PGTZ: "Asia/Saigon"
    command: |
      sh -c "
        echo 'Starting base backup from primary...'
        while true; do
            if pg_isready -h database-primary -d Intern -p 5432; then
              echo 'Primary is healthy' 
              chmod 0700 /var/lib/postgresql/data
              rm -rf /var/lib/postgresql/data/*
              until pg_basebackup --pgdata=/var/lib/postgresql/data -R --slot=replication_slot --host=database-primary --port=5432
              do
                echo 'Waiting for backup to finish'
              done
              echo 'Backup done, starting replica'
              pg_ctl start -D /var/lib/postgresql/data -w
              until ! pg_isready -h database-primary -d Intern -p 5432
              do
                echo 'Replication on primary is healthy'
                sleep 5
              done
            fi
            echo 'Primary is down. Promoting to master...'
            pg_ctl status -D /var/lib/postgresql/data >/dev/null 2>&1 || pg_ctl start -D /var/lib/postgresql/data -w
            pg_ctl promote -D /var/lib/postgresql/data
            echo 'Replica promoted to master!'
            while pg_isready -U replicator -h localhost -d Intern -p 5433
            do
              echo 'Replication after promoting is healthy'
              sleep 5
              if pg_isready -h database-primary -d Intern -p 5432; then
                echo 'Primary is back, stop promoting'
                pg_ctl stop -D /var/lib/postgresql/data
                break
              fi
            done
        done
      "
    volumes:
      - pgdata:/var/lib/postgresql/data
    depends_on:
      database-primary:
        condition: service_healthy
  pg-bouncer-replica:
    <<: *pg-bouncer-common
    depends_on:
      database-replica: 
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h localhost -d Intern -U postgres -p 6433"]
      interval: 10s
      timeout: 3s
      retries: 5
    expose:
      - "6433:6433"
    environment:
      DB_USER: "replicator"
      DB_PASSWORD: "admin123"
      TZ: "Asia/Saigon"
    volumes:
      - ./Database/PgBouncer/pgbouncer_replica.ini:/etc/pgbouncer/pgbouncer.ini
      - ./Database/PgBouncer/init.sh:/usr/local/bin/init.sh
    entrypoint: "sh /usr/local/bin/init.sh"
  
  haproxy:
    image: haproxy:alpine
    volumes:
      - ./Database/HAProxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg
    environment:
      TZ: "Asia/Saigon"
    ports:
      - "6001:6001"
      - "6002:6002"
      - "8404:8404"
    restart: no
    networks:
      - petro-network
    depends_on:
      pg-bouncer-primary:
        condition: service_healthy
      pg-bouncer-replica:
        condition: service_healthy
  mqtt-handler:
    build:
      context: MQTTHandler
      dockerfile: Dockerfile
    networks:
      - petro-network
    environment:
      TZ: "Asia/Saigon"
      SCHEMA: "petro_application"
      DBWRITE_CONNECTION_STRING: "Host=haproxy;Port=6001;Username=write_user;Password=write123;Database=Intern;Timezone=Asia/Saigon"
      CLIENT_PFX_PATH: "certs/certificate.pfx"
      CLIENT_PFX_PASSWORD: "admin123"
      MOSQUITTO_USERNAME: "mqthanggg"
      MOSQUITTO_PASSWORD: "admin123"
      MOSQUITTO_HOST: "mqtt"
      MOSQUITTO_PORT: "8883"
      ASPNETCORE_ENVIRONMENT: "Development"
      ASPNETCORE_URLS: "https://0.0.0.0:7138;http://0.0.0.0:5195"
      ASPNETCORE_Kestrel__Certificates__Default__Password: "admin123"
      ASPNETCORE_Kestrel__Certificates__Default__Path: "/https/aspnetapp.pfx"
    volumes:
      - ./MQTTHandler/certs/aspnetapp.pfx:/https/aspnetapp.pfx:ro
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:5195/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
    ports:
      - "5195:5195"
      - "7138:7138"
    depends_on:
      haproxy:
        condition: service_started
      mqtt:
        condition: service_started
  # mqtt broker
  mqtt:
    restart: no
    networks:
      - petro-network
    build:
      context: Mosquitto/mosquitto
      dockerfile: Dockerfile
    volumes:
      - ./Mosquitto/mosquitto/config:/mosquitto/config
      - ./Mosquitto/mosquitto/certs:/mosquitto/certs
    ports:
      - "8883:8883"
  server1:
    build:
      context: ./PetroServer
      dockerfile: Dockerfile
    networks:
      - petro-network
    environment:
      TZ: "Asia/Saigon"
      SCHEMA: "petro_application"
      DBWRITE_CONNECTION_STRING: "Host=haproxy;Port=6001;Username=write_user;Password=write123;Database=Intern;Timezone=Asia/Saigon"
      DBREAD_CONNECTION_STRING: "Host=haproxy;Port=6002;Username=read_user;Password=read123;Database=Intern;Timezone=Asia/Saigon"
      DEVELOPMENT_AUTHORITY: "http://localhost:5180"
      DEVELOPMENT_AUDIENCE: "http://localhost:5170"
      PRODUCTION_AUTHORITY: "https://localhost:7159"
      PRODUCTION_AUDIENCE: "https://localhost:7149"
      DEVELOPMENT_VALID_ISSUERS: "http://localhost:5180;http://localhost:5181;http://localhost:5182"
      PRODUCTION_VALID_ISSUERS: "https://localhost:7159;https://localhost:7160;https://localhost:7161"
      PRIVATE_KEY_PATH: "rsa_key/private_key.pem"
      PUBLIC_KEY_PATH: "rsa_key/public_key.pem"
      CLIENT_PFX_PATH: "certs/certificate.pfx"
      CLIENT_PFX_PASSWORD: "admin123"
      ASPNETCORE_ENVIRONMENT: "Development"
      ASPNETCORE_URLS: "https://0.0.0.0:7159;http://0.0.0.0:5180"
      ASPNETCORE_Kestrel__Certificates__Default__Password: "admin123"
      ASPNETCORE_Kestrel__Certificates__Default__Path: "/https/aspnetapp.pfx"
      MQTT_HANDLER_URL: "http://mqtt-handler:5195/ws"
    volumes:
      - ./PetroServer/certs/aspnetapp.pfx:/https/aspnetapp.pfx:ro
    ports:
      - "5180:5180"
      - "7159:7159"
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:5180/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
    depends_on:
      haproxy:
        condition: service_started
      mqtt:
        condition: service_started
      mqtt-handler:
        condition: service_healthy

  server2:
    build:
      context: ./PetroServer
      dockerfile: Dockerfile
    networks:
      - petro-network
    environment:
      TZ: "Asia/Saigon"
      SCHEMA: "petro_application"
      DBWRITE_CONNECTION_STRING: "Host=haproxy;Port=6001;Username=write_user;Password=write123;Database=Intern;Timezone=Asia/Saigon"
      DBREAD_CONNECTION_STRING: "Host=haproxy;Port=6002;Username=read_user;Password=read123;Database=Intern;Timezone=Asia/Saigon"
      DEVELOPMENT_AUTHORITY: "http://localhost:5181"
      DEVELOPMENT_AUDIENCE: "http://localhost:5170"
      PRODUCTION_AUTHORITY: "https://localhost:7160"
      PRODUCTION_AUDIENCE: "https://localhost:7149"
      DEVELOPMENT_VALID_ISSUERS: "http://localhost:5180;http://localhost:5181;http://localhost:5182"
      PRODUCTION_VALID_ISSUERS: "https://localhost:7159;https://localhost:7160;https://localhost:7161"
      PRIVATE_KEY_PATH: "rsa_key/private_key.pem"
      PUBLIC_KEY_PATH: "rsa_key/public_key.pem"
      CLIENT_PFX_PATH: "certs/certificate.pfx"
      CLIENT_PFX_PASSWORD: "admin123"
      ASPNETCORE_ENVIRONMENT: "Development"
      ASPNETCORE_URLS: "https://0.0.0.0:7160;http://0.0.0.0:5181"
      ASPNETCORE_Kestrel__Certificates__Default__Password: "admin123"
      ASPNETCORE_Kestrel__Certificates__Default__Path: "/https/aspnetapp.pfx"
      MQTT_HANDLER_URL: "http://mqtt-handler:5195/ws"
    volumes:
      - ./PetroServer/certs/aspnetapp.pfx:/https/aspnetapp.pfx:ro
    ports:
      - "5181:5181"
      - "7160:7160"
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:5181/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
    depends_on:
      haproxy:
        condition: service_started
      mqtt:
        condition: service_started
      mqtt-handler:
        condition: service_healthy

  server3:
    build:
      context: ./PetroServer
      dockerfile: Dockerfile
    networks:
      - petro-network
    environment:
      TZ: "Asia/Saigon"
      SCHEMA: "petro_application"
      DBWRITE_CONNECTION_STRING: "Host=haproxy;Port=6001;Username=write_user;Password=write123;Database=Intern;Timezone=Asia/Saigon"
      DBREAD_CONNECTION_STRING: "Host=haproxy;Port=6002;Username=read_user;Password=read123;Database=Intern;Timezone=Asia/Saigon"
      DEVELOPMENT_AUTHORITY: "http://localhost:5182"
      DEVELOPMENT_AUDIENCE: "http://localhost:5170"
      PRODUCTION_AUTHORITY: "https://localhost:7161"
      PRODUCTION_AUDIENCE: "https://localhost:7149"
      DEVELOPMENT_VALID_ISSUERS: "http://localhost:5180;http://localhost:5181;http://localhost:5182"
      PRODUCTION_VALID_ISSUERS: "https://localhost:7159;https://localhost:7160;https://localhost:7161"
      PRIVATE_KEY_PATH: "rsa_key/private_key.pem"
      PUBLIC_KEY_PATH: "rsa_key/public_key.pem"
      CLIENT_PFX_PATH: "certs/certificate.pfx"
      CLIENT_PFX_PASSWORD: "admin123"
      ASPNETCORE_ENVIRONMENT: "Development"
      ASPNETCORE_URLS: "https://0.0.0.0:7161;http://0.0.0.0:5182"
      ASPNETCORE_Kestrel__Certificates__Default__Password: "admin123"
      ASPNETCORE_Kestrel__Certificates__Default__Path: "/https/aspnetapp.pfx"
      MQTT_HANDLER_URL: "http://mqtt-handler:5195/ws"                                                                                                                                                                                                                                
    volumes:
      - ./PetroServer/certs/aspnetapp.pfx:/https/aspnetapp.pfx:ro
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:5182/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
    ports:
      - "5182:5182"
      - "7161:7161"
    depends_on:
      haproxy:
        condition: service_started
      mqtt:
        condition: service_started
      mqtt-handler:
        condition: service_healthy
  yarp:
    build: 
      context: ./YarpGateway
      dockerfile: Dockerfile
    networks:
      - petro-network
    environment:
      TZ: "Asia/Saigon"
      ASPNETCORE_ENVIRONMENT: "Development"
      ASPNETCORE_URLS: "https://0.0.0.0:7149;http://0.0.0.0:5170"
      ASPNETCORE_Kestrel__Certificates__Default__Password: "admin123"
      ASPNETCORE_Kestrel__Certificates__Default__Path: "/https/aspnetapp.pfx"
      ReverseProxy__Clusters__cluster1__Destinations__cluster1/destination1__Address: "http://server1:5180"
      ReverseProxy__Clusters__cluster1__Destinations__cluster1/destination2__Address: "http://server2:5181"
      ReverseProxy__Clusters__cluster1__Destinations__cluster1/destination3__Address: "http://server3:5182"
    volumes:
      - ./PetroServer/certs/aspnetapp.pfx:/https/aspnetapp.pfx:ro
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:5170/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
    ports:
      - "5170:5170"
      - "7149:7149"
    depends_on:
      haproxy:
        condition: service_started
      mqtt:
        condition: service_started
      mqtt-handler:
        condition: service_healthy
      server1:
        condition: service_healthy
      server2:
        condition: service_healthy
      server3:
        condition: service_healthy
  fe:
    build:
      context: PetroUI
      dockerfile: Dockerfile
    ports:
      - "4200:4200"
    networks:
      - petro-network
    restart: no
    environment:
      TZ: "Asia/Saigon"
    depends_on:
      yarp:
        condition: service_healthy

networks:
  petro-network:
    driver: bridge
    
volumes:
  pgdata: